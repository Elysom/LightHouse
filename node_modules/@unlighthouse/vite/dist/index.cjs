'use strict';

function once(fn) {
  let done = false;
  return function(...args) {
    return done ? void 0 : (done = true, fn.apply(this, args));
  };
}

function VitePlugin(config = {}) {
  let bail = false;
  return {
    name: "unlighthouse:vite",
    apply: "serve",
    configResolved(config2) {
      if (config2.command !== "serve" || config2.isProduction)
        bail = true;
    },
    async configureServer(viteServer) {
      if (bail)
        return;
      const { createUnlighthouse, useLogger, useUnlighthouse } = await import('@unlighthouse/core');
      const { createServer } = await import('@unlighthouse/server');
      const unlighthouse = useUnlighthouse() || await createUnlighthouse({
        ...config,
        root: viteServer.config.root,
        routerPrefix: "/__unlighthouse",
        scanner: {
          skipJavascript: false
        }
      }, {
        name: "vite"
      });
      const { server, app } = await createServer();
      if (!viteServer.config.server.proxy)
        viteServer.config.server.proxy = {};
      viteServer.config.server.proxy["/__unlighthouse"] = server.url;
      unlighthouse.hooks.hookOnce("route-definitions-provided", (routeDefinitions) => {
        unlighthouse.provider.routeDefinitions = routeDefinitions;
      });
      const setHost = once((host) => {
        console.warn("@unlighthouse/vite is being deprecated, consider removing it. Read more: https://unlighthouse.dev/integration-deprecations");
        setTimeout(async () => {
          const unlighthouse2 = useUnlighthouse();
          const logger = useLogger();
          unlighthouse2.setSiteUrl(host);
          await unlighthouse2.setServerContext({ url: server.url, server: server.server, app });
          logger.success(`\u26F5  Start Unlighthouse - ${server.url}`);
        }, 300);
      });
      if (viteServer.httpServer) {
        viteServer.httpServer.on("listening", () => {
          let host = "";
          const address = viteServer.httpServer?.address();
          if (typeof address === "string")
            host = address;
          else if (address?.port)
            host = `http://localhost:${address.port}`;
          if (host)
            setHost(host);
        });
      } else {
        if (unlighthouse.resolvedConfig.site) {
          setHost(unlighthouse.resolvedConfig.site);
        } else {
          unlighthouse.hooks.hookOnce("site-changed", async () => {
            setHost(unlighthouse.resolvedConfig.site);
          });
        }
      }
    },
    async handleHotUpdate(hmr) {
      const { useUnlighthouse } = await import('@unlighthouse/core');
      const { worker } = useUnlighthouse();
      worker.invalidateFile(hmr.file);
    }
  };
}

module.exports = VitePlugin;
